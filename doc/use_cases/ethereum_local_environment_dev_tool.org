:PROPERTIES:
:ID:       cd599835-d6ac-4970-8f7f-34d82068ef4b
:END:
#+TITLE: Ethereum local environment dev tool
#+language: en
#+EXPORT_FILE_NAME: ./ethereum_local_environment_dev_tool.md

#+CALL: ../../lp.org:check-result()

#+name: init
#+BEGIN_SRC bash :results none :exports none :session cd599835-d6ac-4970-8f7f-34d82068ef4b
  . ./sandboxing.sh
#+END_SRC

When needing to play with ethereum, I created a [[https://github.com/clk-project/clk_extension_eth][clk extension]] to do so. I will
simply mock this extension right now so that we won't have to install a local
blockchain node to reproduce the story, but it should feel the same.

In particular, I will focus only the part that discuss with smart contracts.

#+NAME: install_eth
#+BEGIN_SRC bash :results none :exports code :session cd599835-d6ac-4970-8f7f-34d82068ef4b
  clk command create python eth --description "Play with ethereum" --group --body "
  @eth.group()
  @option('--abi-path', help='Where the abi description is located', required=True)
  @option('--address', help='The address of the contract', required=True)
  def contract(abi_path, address):
      'Discuss with a smart contract'
      print(f'I would discuss with the contract whose address is {address} and abi path is {abi_path}')

  @contract.command()
  @argument('name', help='The function to call on the contract', type=click.Choice(['dosomething', 'dosomethingelse']))
  def call(name):
      'Call a function'
      print(f'I would call the function {name}')
  "
#+END_SRC

This command simulates the discussion with a contract.

#+NAME: call_some
#+BEGIN_SRC bash :results verbatim :exports both :session cd599835-d6ac-4970-8f7f-34d82068ef4b :cache yes
  clk eth contract --abi-path some.json --address 0xdeadbeef call dosomething
#+END_SRC

#+RESULTS[cd08c81501ae183779f3da85c519de9bc91be413]: call_some
: I would discuss with the contract whose address is 0xdeadbeef and abi path is some.json
: I would call the function dosomething

This is a quite generic way to discuss with contracts, but it is not
practical. Fortunately, aliases are here to help.

#+NAME: create_alias
#+BEGIN_SRC bash :results none :exports code :session cd599835-d6ac-4970-8f7f-34d82068ef4b
  clk alias set eth.mycontract eth contract --abi-path some.json --address 0xdeadbeef
#+END_SRC

Then, I can simply call the contract function.

#+NAME: call_alias
#+BEGIN_SRC bash :results verbatim :exports both :session cd599835-d6ac-4970-8f7f-34d82068ef4b :cache yes
  clk eth mycontract call dosomething
#+END_SRC

#+RESULTS[02c56cb284626fd8e3f8c2dd2579ba88ad84d5f8]: call_alias
: I would discuss with the contract whose address is 0xdeadbeef and abi path is some.json
: I would call the function dosomething

I can even take advantage of the completion.

#+NAME: sequence-to-complete
#+BEGIN_SRC bash :results none :exports none
  eth mycontract call do
#+END_SRC

#+NAME: show_completion
#+BEGIN_SRC bash :results none :exports code :noweb yes
  clk <<sequence-to-complete>><TAB>
#+END_SRC

#+NAME: try_completion
#+BEGIN_SRC bash :results verbatim :exports results :session cd599835-d6ac-4970-8f7f-34d82068ef4b :noweb yes :cache yes
  clk completion try --remove-bash-formatting --last <<sequence-to-complete>>
#+END_SRC

#+RESULTS[8ceea5ac46078280efe78c0fbef88aed032564fa]: try_completion
: dosomething
: dosomethingelse

Unfortunately, this is still not ideal. Each time I deploy the contract, its
address will change. So I would like to avoid the hardcoded value ~0xdeadbeef~.

Let's do that using the ~eval:~ value.

First, let's add clk commands to simulate deploying a contract and fetching its
address.

#+NAME: deploy
#+BEGIN_SRC bash :results none :exports code :session cd599835-d6ac-4970-8f7f-34d82068ef4b
  clk command create bash --force eth.deploy --description 'Deploy a new contract, save its address locally' --body '

  # we simply want that each time this code is run, it returns something
  # different. But for the sake of this example, we also want the code to return
  # something reproducible

  if test -e contract-address.txt
  then
     prev="$(cat contract-address.txt)"
  else
     prev=""
  fi

  echo ${prev} | md5sum | cut -f1 -d" " > contract-address.txt
  clk log "Contract deployed at address: $(cat contract-address.txt)"
  '
#+END_SRC

Let's try it

#+NAME: try_deploy
#+BEGIN_SRC bash :results verbatim :exports both :session cd599835-d6ac-4970-8f7f-34d82068ef4b :cache yes 
  clk eth deploy
  clk eth deploy
#+END_SRC

#+RESULTS[d034e786578a62a4d8546e9fbc0d56411ba878ad]: try_deploy
: Contract deployed at address: 68b329da9893e34099c7d8ad5cb9c940
: Contract deployed at address: 223632c428784fecaaa3e2a6aaaf6d8e

Now, we want to have a command to get this address, so that we will be able to
put it in the definition of another command. In this mock, it simply shows the
value stored in the ~contract-address.txt~ file. Therefore, an alias is more
than enough.

#+NAME: get-address
#+BEGIN_SRC bash :results verbatim :exports both :session cd599835-d6ac-4970-8f7f-34d82068ef4b :cache yes
  clk alias set eth.get-address exec cat contract-address.txt
  clk eth get-address
#+END_SRC

#+RESULTS[951a5fd3425ed87a32114c6ce6225fb3ada0b9a4]: get-address
: New global alias for eth.get-address: exec cat contract-address.txt
: 223632c428784fecaaa3e2a6aaaf6d8e

Now, let's use a call to this command instead of hardcoding ~0xdeadbeef~.

#+NAME: use_eval
#+BEGIN_SRC bash :results none :exports code :session cd599835-d6ac-4970-8f7f-34d82068ef4b
  clk alias set eth.mycontract eth contract --abi-path some.json --address "noeval:eval:clk eth get-address"
#+END_SRC

The first ~noeval:~ tells clk not to evaluate this command when creating the
alias, otherwise, the alias would be defined with the result of the ~eval:~,
while we actually want it to be defined verbatim.

Now, the mycontract command it done. The value of the address it communicates
with is dynamically updated.

#+NAME: try-command-with-eval
#+BEGIN_SRC bash :results verbatim :exports both :session cd599835-d6ac-4970-8f7f-34d82068ef4b :cache yes
  clk eth mycontract call dosomething
  clk eth deploy
  clk eth mycontract call dosomething
#+END_SRC

#+RESULTS[11227f97ebd36264b54a4de780500413a583c3ed]: try-command-with-eval
: I would discuss with the contract whose address is 223632c428784fecaaa3e2a6aaaf6d8e and abi path is some.json
: I would call the function dosomething
: Contract deployed at address: 47156ddb404b893cbbe9c85509710f64
: I would discuss with the contract whose address is 47156ddb404b893cbbe9c85509710f64 and abi path is some.json
: I would call the function dosomething

* advanced use case, caching the result
  :PROPERTIES:
  :CUSTOM_ID: e909c8aa-34f1-499c-b789-2581ec67e4f2
  :END:

  In case ~eval:clk eth get-address~ takes some time to run, you can make use of
  caching, using ~eval(60):clk eth get-address~. This will cache the result for 60
  seconds, making only the first call be slow.


  This is particularly handy in case you use the completion of clk a lot and are
  annoying by the time it may take to answer.

  Of course, you might object that, because the result is cached, we could be out
  of sync. Indeed, let's consider the following example, where the command line is
  cached and we deploy again.

  #+NAME: issue-using-with-cache
  #+BEGIN_SRC bash :results verbatim :exports both :session cd599835-d6ac-4970-8f7f-34d82068ef4b :cache yes
    clk alias set eth.mycontract eth contract --abi-path some.json --address "noeval:eval(60):clk eth get-address"
    clk eth mycontract call dosomething
    clk eth deploy
    clk eth mycontract call dosomething
  #+END_SRC

  #+RESULTS[c5577dd3830533db1bd7de78a528c5e966a21b5d]: issue-using-with-cache
  : Removing global alias of eth.mycontract: eth contract --abi-path some.json --address eval:clk eth get-address
  : New global alias for eth.mycontract: eth contract --abi-path some.json --address eval(60):clk eth get-address
  : I would discuss with the contract whose address is 47156ddb404b893cbbe9c85509710f64 and abi path is some.json
  : I would call the function dosomething
  : Contract deployed at address: ed5b4c043e36c30f31a158e8bda16e2b
  : I would discuss with the contract whose address is 47156ddb404b893cbbe9c85509710f64 and abi path is some.json
  : I would call the function dosomething

  As you can see, even though we create a new contract, the command still use the
  last address. This is expected, as its result is cached for 60 seconds.

  One way to mitigate this is to use the experimental command ~parameter drop-cache~ when deploying the contract.

  #+NAME: dropping-the-cache-when-deploying
  #+BEGIN_SRC bash :results verbatim :exports both :session cd599835-d6ac-4970-8f7f-34d82068ef4b :cache yes
    clk eth mycontract call dosomething
    clk eth deploy && clk parameter drop-cache "clk eth get-address"
    clk eth mycontract call dosomething
  #+END_SRC

  #+RESULTS[5a71ab66a8901f54db75bbb3fd4e0e99a067e3d0]: dropping-the-cache-when-deploying
  : I would discuss with the contract whose address is 47156ddb404b893cbbe9c85509710f64 and abi path is some.json
  : I would call the function dosomething
  : Contract deployed at address: 53303a8fa63a943a2591b8de2b026da6
  : I would discuss with the contract whose address is 53303a8fa63a943a2591b8de2b026da6 and abi path is some.json
  : I would call the function dosomething

  Now, we are finished with this command. It is reactive because the slow
  computation is cached, but you can still invalidate the cache if need be,
  avoiding making it inconsistent.

  #+NAME: test
  #+BEGIN_SRC bash :results none :exports none :noweb yes :shebang "#!/bin/bash -eu" :tangle ../../tests/use_cases/ethereum_local_environment_dev_tool.sh
    <<init>>

    <<install_eth>>

    check-result(call_some)

    <<create_alias>>

    check-result(call_alias)

    check-result(try_completion)

    <<deploy>>

    check-result(try_deploy)

    check-result(get-address)

    <<use_eval>>

    check-result(try-command-with-eval)

    check-result(issue-using-with-cache)

    check-result(dropping-the-cache-when-deploying)
  #+END_SRC
