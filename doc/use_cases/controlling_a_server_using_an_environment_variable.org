:PROPERTIES:
:ID:       3a3f2856-a1c4-4be6-9521-00a39e0f728d
:END:
#+language: en
#+EXPORT_FILE_NAME: ./controlling_a_server_using_an_environment_variable.md

#+CALL: ../../lp.org:check-result()

#+name: init
#+BEGIN_SRC bash :results none :exports none :session 3a3f2856-a1c4-4be6-9521-00a39e0f728d
  . ./sandboxing.sh
#+END_SRC

Say that I have a server to perform some home automation.

Some commands are as simple as curling to its IP address. Because I want to make
use of clk power, I want to wrap those curl commands into clk.

In this example, I mock this call using echo, but we simply can replace echo by
exec to make it work for real.

#+NAME: curl
#+BEGIN_SRC bash :results verbatim :exports both :session 3a3f2856-a1c4-4be6-9521-00a39e0f728d :cache yes
clk alias set myserver echo curl http://myserverip/somecommand
clk myserver
#+END_SRC

#+RESULTS[deb8dc21122d8013253690a6452219f42a38fb8b]: curl
: New global alias for myserver: echo curl http://myserverip/somecommand
: curl http://myserverip/somecommand

In my setup, the address of the server is actually in some environment variable.

#+NAME: envvariable
#+BEGIN_SRC bash :results none :exports code :session 3a3f2856-a1c4-4be6-9521-00a39e0f728d
export MYSERVER=myserverip
#+END_SRC

Therefore, I want my alias to make use of that environment variable.

I can call any python code on the fly in any argument using the pyeval: prefix.

And to make sure the pyeval code is actually run when running the alias but not
when defining it, I can use noeval:

#+NAME: withpyeval
#+BEGIN_SRC bash :results verbatim :exports both :session 3a3f2856-a1c4-4be6-9521-00a39e0f728d :cache yes
clk alias set myserver echo curl 'noeval:pyeval:"http://{MYSERVER}/sommecommand".format(**os.environ)'
clk myserver
#+END_SRC

#+RESULTS[fb7d9a56c93eb67a40bc4a6c33e8e5afd828bf8d]: withpyeval
: Removing global alias of myserver: echo curl http://myserverip/somecommand
: New global alias for myserver: echo curl pyeval:"http://{MYSERVER}/sommecommand".format(**os.environ)
: curl http://myserverip/sommecommand

This might be useful in some situation, but as you can see it is quite verbose.

We can also use shell commands, using the eval: prefix in arguments, let's try
it.

#+NAME: witheval
#+BEGIN_SRC bash :results verbatim :exports both :session 3a3f2856-a1c4-4be6-9521-00a39e0f728d :cache yes
clk alias set myserver echo curl 'noeval:eval:sh -c "echo http://${MYSERVER}/sommecommand"'
clk myserver
#+END_SRC

#+RESULTS[0ec604238a04951a9d54de506f036e19657e96d1]: witheval
: Removing global alias of myserver: echo curl pyeval:"http://{MYSERVER}/sommecommand".format(**os.environ)
: New global alias for myserver: echo curl eval:sh -c "echo http://${MYSERVER}/sommecommand"
: curl http://myserverip/sommecommand

That's better. But still very verbose compared to what I want.

The last shortcut we have is to use the tpl: prefix, to only replace the environment variables.

#+NAME: withtpl
#+BEGIN_SRC bash :results verbatim :exports both :session 3a3f2856-a1c4-4be6-9521-00a39e0f728d :cache yes
clk alias set myserver echo curl 'noeval:tpl:http://${MYSERVER}/sommecommand'
clk myserver
#+END_SRC

#+RESULTS[05e7253effbd63c20011504b77d8038003e7be10]: withtpl
: Removing global alias of myserver: echo curl eval:sh -c "echo http://${MYSERVER}/sommecommand"
: New global alias for myserver: echo curl tpl:http://${MYSERVER}/sommecommand
: curl http://$myserverip/sommecommand

That's much better!

#+NAME: run
#+BEGIN_SRC bash :results none :exports none :tangle ../../tests/use_cases/controlling_a_server_using_an_environment_variable.sh :noweb yes :shebang "#!/bin/bash -eu"
<<init>>

check-result(curl)

<<envvariable>>

check-result(withpyeval)

check-result(witheval)

check-result(withtpl)

#+END_SRC
