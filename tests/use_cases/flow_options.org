:PROPERTIES:
:ID:       73f5d57e-d16a-490a-b4e1-0254d6296590
:END:
#+TITLE: Flow options
#+language: en
#+EXPORT_FILE_NAME: ../../doc/use_cases/flow_options.md

#+CALL: ../../lp.org:check-result()

#+name: init
#+BEGIN_SRC bash :results none :exports none :session 73f5d57e-d16a-490a-b4e1-0254d6296590
  . ./sandboxing.sh
#+END_SRC

When you get used to create groups of commands, you generally end up having a
sequence that comes out quite naturally.

It is handy to have each command do one thing and do it well, while at the same
time have a shortcut to chain them.

For the sake of the example, let's suppose you are writing a bunch of commands
to perform 3d printing.

You would first create the group of commands named ~printer~ like so.

#+name: create-group
#+BEGIN_SRC bash :results none :exports code :session 73f5d57e-d16a-490a-b4e1-0254d6296590
  clk command create python --group printer
#+END_SRC

Then, in the printer.py file that just opened, there is already the group printer
set up. Let's change its documentation so that it says something more meaningful.

Something like this
#+NAME: documentation
: This is a group of commands to deal with 3D printing.

#+NAME: inject-doc
#+BEGIN_SRC bash :session 73f5d57e-d16a-490a-b4e1-0254d6296590 :results none :exports none :var documentation=documentation
  sed -i "s/Description/$documentation/" "${CLKCONFIGDIR}/python/printer.py"
#+END_SRC

You might be tempted to start with the most important command, the one that
sends a gcode to the printer.

#+NAME: send
#+BEGIN_SRC python  :exports code
  @printer.command()
  @option("--gcode", help="The gcode file", default="model.gcode")
  @flag("--warn-when-done", help="Trigger a notification when done")
  @argument("printer", help="The ip of the printer to send the gcode to")
  def send(gcode, warn_when_done, printer):
      """Send some gcode to your printer"""
      print(f"Printing {gcode} using {printer}")
      if warn_when_done:
          print("Driiiiiiing!")
#+END_SRC


Then, you realize that you got from thingiverse some stl file, not some actual
gcode. Therefore, you might want to run a slicer to.

#+NAME: slice
#+BEGIN_SRC python
  @printer.command()
  @option("--model", default=["model.stl"], help="The model to slice", multiple=True)
  @option("--output", default="model.gcode", help="The file getting the final gcode")
  def slice(model, output):
      """Slice a model"""
      print(f"Slicing {', '.join(model)} to {output}")
#+END_SRC

That is nice. But now, you also realize that you need to calibrate the printer
before sending the gcode content.

#+NAME: calibrate
#+BEGIN_SRC python
  @printer.command()
  def calibrate():
      """Run everything that is needed to have the printer ready to print"""
      print("Running some stuff for the printer to be ready to go")
#+END_SRC

As you see, we focused on each individual command separately, without much care
for the other ones.

Now, let's try to create one command to combine them all.

It would be great to have a flow that would take the "--model" option of slice
as well as the "--warn-when-done" flag and the "printer" argument of send.

Let's define such a flow.

#+NAME: flow
#+BEGIN_SRC python
  from clk.overloads import get_command

  @printer.flow_command()
  @get_command("printer.slice").flow_option("model")
  @get_command("printer.send").flow_option("warn_when_done")
  @get_command("printer.send").flow_argument("printer")
  def flow(**kwargs):
      """Run the whole flow"""
      print("The flow is done")
#+END_SRC

The flow_option and flow_argument lines tell that this new command "captures"
those parameters from the respective commands.

This will make the command flow behave like if

1. it naturally had those parameters
2. it has a flow to those commands
3. it was called with ~--flow~


Then, when you run the flow, you get this.

#+NAME: command
#+BEGIN_SRC python :noweb yes :exports none
  <<send>>

  <<slice>>

  <<calibrate>>

  <<flow>>
#+END_SRC

#+NAME: copy
#+BEGIN_SRC bash :results none :exports none :noweb yes :session 73f5d57e-d16a-490a-b4e1-0254d6296590
  cat<<EOF >> "${CLKCONFIGDIR}/python/printer.py"
  <<command>>
  EOF
#+END_SRC

#+NAME: run_flow
#+BEGIN_SRC bash :results verbatim :exports both :session 73f5d57e-d16a-490a-b4e1-0254d6296590 :cache yes
  clk printer flow myprinter --model somemodel --model someothermodel --warn-when-done
#+END_SRC

#+RESULTS[25af26071d091d5548b38e4eb061bf6ecba3358f]: run_flow
: Slicing somemodel, someothermodel to model.gcode
: Printing model.gcode using myprinter
: Driiiiiiing!
: The flow is done

#+NAME: script
#+BEGIN_SRC bash :results none :exports none :tangle flow_options.sh :noweb yes :shebang "#!/bin/bash -eu" :var documentation=documentation
  <<init>>

  <<create-group>>

  <<inject-doc>>

  <<copy>>

  check-result(run_flow)
#+END_SRC
