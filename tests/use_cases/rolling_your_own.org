:PROPERTIES:
:ID:       807c02cd-a6cf-432f-b982-530fc81dbbf4
:END:
#+language: en
#+EXPORT_FILE_NAME: ../../doc/use_cases/rolling_your_own.md

#+CALL: ../../lp.org:check-result()

#+name: init
#+BEGIN_SRC bash :results none :exports none :session 807c02cd-a6cf-432f-b982-530fc81dbbf4
. ./sandboxing.sh
#+END_SRC

When installed, clk comes with an executable that may be used for all your
workflows.

But you may want to run your own project without prefixing stuffs with ~clk...~.

But first, two things:
1. we assume you want to create a tool that contains subcommands, like *git*,
   not a single command, like *find*. This is because we will automatically
   create some subcommands to deal with aliases, parameters etc.
2. we assume you don't mind creating a full python project and not a single
   ".py" file.


clk provides out of the box a command to bootstrap your own tool.

#+name: fork
#+BEGIN_SRC bash :results verbatim :exports both :session 807c02cd-a6cf-432f-b982-530fc81dbbf4
clk fork mytool
#+END_SRC

#+RESULTS: fork
: Now, install mytool with either `pipx install ./mytool` or `python3 -m venv venv && ./venv/bin/pip install ./mytool` followed by `export "PATH=$(pwd)/venv/bin/:${PATH}"`. Then, enable its completion with `mytool completion install` and don't forget to have fun

Now, simply install this tool, like suggested.

#+NAME: remember-current-clk
#+BEGIN_SRC bash :results none :exports none :session 807c02cd-a6cf-432f-b982-530fc81dbbf4
CURRENT_CLK="$(clk python -c 'from pathlib import Path; import clk ; print(Path(clk.__path__[0]).parent)')"
#+END_SRC

#+NAME: install
#+BEGIN_SRC bash :results none :exports code :session 807c02cd-a6cf-432f-b982-530fc81dbbf4 :noweb yes
python3 -m venv venv
./venv/bin/pip install ./mytool
export PATH="$(pwd)/venv/bin/:${PATH}"
#+END_SRC

#+NAME: install-current-clk
#+BEGIN_SRC bash :results none :exports none :session 807c02cd-a6cf-432f-b982-530fc81dbbf4
  if test -e /dist/clk*
  then
      # installing the version of clk that was left here. It matches the one we are currently testing
     ./venv/bin/pip install /dist/*
  else
     ./venv/bin/pip install "${CURRENT_CLK}"
  fi
#+END_SRC

From there, you can play with this new toy.

#+NAME: sandbox-mytool
#+BEGIN_SRC bash :results none :exports none :session 807c02cd-a6cf-432f-b982-530fc81dbbf4
  mkdir -p "${TMP}/mytool-root"
  cat <<EOF > "${TMP}/mytool-root/mytool.json"
  {
      "parameters": {
          "command.create.python": [
              "--no-open"
          ],
          "command.create.bash": [
              "--no-open"
          ]
      }
  }
  EOF
  eval "$(direnv hook bash)"
  export MYTOOLCONFIGDIR=${TMP}/mytool-root
  echo "export MYTOOLCONFIGDIR=${TMP}/mytool-root" >> "${TMP}/.envrc" && direnv allow
#+END_SRC

#+NAME: create-command
#+BEGIN_SRC bash :results none :exports both :session 807c02cd-a6cf-432f-b982-530fc81dbbf4
mytool command create bash hello-world --description "Just say hello" --body 'echo "Hello world"'
#+END_SRC

#+NAME: call
#+BEGIN_SRC bash :results verbatim :exports both :session 807c02cd-a6cf-432f-b982-530fc81dbbf4 :cache yes
mytool hello-world
#+END_SRC

#+RESULTS[6f312c4c930a2df6aee688a7b70feff94276ec07]: call
: Hello world

This new tools has all the bells and whistles of clk.

#+NAME: help
#+BEGIN_SRC bash :results verbatim :exports both :session 807c02cd-a6cf-432f-b982-530fc81dbbf4 :cache yes
mytool --help
#+END_SRC

#+RESULTS[2a17cc061ab31cef21e7d6330aa3f1abf9ef6705]: help
#+begin_example
Usage: mytool [OPTIONS] COMMAND [ARGS]...

Options:
  --env TEXT                      Add this custom environment variable
  --profiling                     Enable profiling the application code
  -u, --without-extension EXTENSION
                                  Disable this extension for the time of the command
  -e, --extension EXTENSION       Enable this extension for the time of the command
  --report-file TEXT              Create a report file to put with bug reports
  --flow-verbose                  Show more precisely when a flow starts and when it
                                  ends
  --debug-on-command-load-error   Trigger a debugger whenever a command fails to load
  --post-mortem / --no-post-mortem
                                  Run a post-mortem debugger in case of exception
  --exit-on-log-level [develop|debug|action|status|deprecated|info|warning|error|critical]
                                  Exit when one log of this level is issued. Useful to
                                  reproduce the -Werror behavior of gcc
  -D, --develop / --no-develop    Same as --log-level develop
  -d, --debug / --no-debug        Same as --log-level debug
  -a, --action / --no-action      Same as --log-level action
  -q, --quiet / --no-quiet        Same as --log-level critical
  -L, --log-level [develop|debug|action|status|deprecated|info|warning|error|critical]
                                  Log level (default to 'deprecated')
  --ask-secret / --no-ask-secret  Interactively ask for the secret if the secret
                                  manager does not provide it
  --alternate-style STYLE         Alternate style
  --plugin-dirs TEXT
  --persist-migration / --no-persist-migration
                                  Make the profile migration persistent, using --no-
                                  persist-migration will preserve the profiles, unless
                                  you explicitly write into them. This is useful if
                                  you want to use a razor edge version of the
                                  application without forcing peoples to move to it.
  -P, --project DIR               Project directory
  --flow-step / --no-flow-step    Make a pause in between the flow steps. Useful to
                                  make demonstrations. Implies --flow-verbose.
  --autoflow / --no-autoflow      Automatically trigger the --flow option in every
                                  command
  --no-cache / --cache            Deactivate the caching mechanism
  --keyring TEXT                  Use this keyring instead of the default one
  -n, --dry-run / --no-dry-run    Don't actually run anything
  --force-color / --no-force-color
                                  Force the color output, even if the output is not a
                                  terminal
  --help-all                      Show the full help message, automatic options
                                  included.
  --help                          Show this message and exit.

Commands:
  alias        Manipulate the command aliases
  command      Display all the available commands
  completion   Shell completion
  describe     Describe the given profile
  echo         Log a message
  env          Show the environment
  exec         Run a program, like good old times.
  extension    Extension related commands
  flowdep      Manipulate command flow dependencies.
  fork         Create a brand new project, based on clk that can be used by itself.
  hello-world  Just say hello
  help         Display help information
  launcher     Manipulate launchers
  log          Log a message
  parameter    Manipulate command parameters
  pip          Run pip in the context of this installation of clk
  plugin       Manipulate plugins
  python       Run the python executable that is currently running clk
  secret       Manipulate your secrets
  trigger      Manipulate command triggers
  value        Manipulate the values
#+end_example


#+BEGIN_SRC bash :tangle rolling_your_own.sh :exports none :noweb yes :shebang "#!/bin/bash -eu"
<<init>>

<<fork>>

<<remember-current-clk>>

<<install>>

<<install-current-clk>>

<<sandbox-mytool>>

<<create-command>>

check-result(call)

<<help>>

#+END_SRC
