:PROPERTIES:
:ID:       0b6acd63-d091-4c6b-83f6-7d2dd3ce908f
:END:
#+TITLE: Dealing with secrets
#+language: en
#+EXPORT_FILE_NAME: ../../doc/use_cases/dealing_with_secrets.md

#+CALL: ../../lp.org:check-result()

#+name: init
#+BEGIN_SRC bash :results none :exports none :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f
  . ./sandboxing.sh
#+END_SRC

There are plenty of use cases that need to use some secret value.

Let's dig into how those are done in clk.

Because clk uses click, the most obvious way of using a secret value is to use
[[https://click.palletsprojects.com/en/8.1.x/options/#password-prompts][the click way]], with ~hide_input=True, confirmation_prompt=True, prompt=True~:
This will ask twice for the password, hiding the input.

For the sake of the example, let's imagine you create a tool that calls some
http endpoint that requires a bearer token.

Something that would be called like this.

#+BEGIN_SRC bash :results none :exports code
clk http --base-url http://somesite --bearer sometoken get /something
#+END_SRC

This translates into something that looks like the following python code.

#+NAME: command
#+BEGIN_SRC python :results none :exports code
  class HTTPConfig:
      pass

  @group()
  @option("--bearer", help="The bearer token to request the API", prompt=True, confirmation_prompt=True, hide_input=True, expose_class=HTTPConfig)
  @option("--base-url", help="The url of the site to play with", expose_class=HTTPConfig)
  def http():
      "Commands to play with some OAuth 2 protected site"

  @http.command()
  @argument("path", help="The endpoint to call")
  def get(path):
      "Perform a get request from the site"
      print(f"Calling {config.http.base_url}/{path} with bearer token {config.http.bearer}")

#+END_SRC

#+NAME: createthecommand
#+BEGIN_SRC bash :results none :exports none :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f :noweb yes
  clk command create python --group http --force
  cat<<EOF >> "${CLKCONFIGDIR}/python/http.py"
  <<command>>
  EOF

#+END_SRC

If you simply use that command, it will prompt you for the password. This may be
not very practical if you are used to call this command pretty often.

To get more information about the pattern behind ~expose_class=HTTPConfig~, see
the tutorial about [[file:dynamic_parameters_and_exposed_class.org][dynamic parameters]].

You may be tempted to add the secret in a simple parameter, like this.

#+NAME: setsecretinparameter
#+BEGIN_SRC bash :results verbatim :exports both :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f :cache yes
clk parameter set http --bearer mytoken
#+END_SRC

#+RESULTS[43a7457422e8407720a3f8f303221aef490d4a05]: setsecretinparameter
: New global parameters for http: --bearer mytoken

#+NAME: usesecretinparameter
#+BEGIN_SRC bash :results verbatim :exports both :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f :cache yes
clk http --base-url someurl get someendpoint
#+END_SRC

#+RESULTS[158a00a9080e5ab95503802e0a00fdd22a999100]: usesecretinparameter
: Calling someurl/someendpoint with bearer token mytoken


This works, but it keeps the bearer token in plain text into the clk
parameters. That is not ideal security-wise.

What we can do instead is use a special value for this parameter that tells clk
to lookup the value in your password manager instead.

#+NAME: usethebearefromsecret
#+BEGIN_SRC bash :results verbatim :exports both :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f :cache yes
clk parameter set http --bearer noeval:secret:http_bearer
#+END_SRC

#+RESULTS[55f18bd97a0c0c1631569bc276ad5278fb2272cd]: usethebearefromsecret
: Removing global parameters of http: --bearer mytoken
: New global parameters for http: --bearer secret:http_bearer

Here is some explanation:
1. the ~noeval:~ prefix tells clk not to replace the following content, so that the secret is not actually looked up when you create the parameter. That way, the parameter will be the literal ~secret:http_bearer~ instead of its content,
2. ~secret:http_bearer~ tells clk to get the secret from your secret manager at the key ~http_bearer~


If the secret is not there, clk will fail and tell you that it could not find it.

#+NAME: httpwithsecretfail
#+BEGIN_SRC bash :results verbatim :exports both :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f :cache yes
clk http --base-url someurl get someendpoint
#+END_SRC

#+RESULTS[158a00a9080e5ab95503802e0a00fdd22a999100]: httpwithsecretfail
: error: Could not find the secret for http_bearer


Now, how do you put the secret in your password manager?

Every password manager has its particularities, so clk does not try to guess
where the secret is located. Instead, it provides an interface to lookup secret
and store secrets in your password manager.

To store a secret, use this command

#+NAME: providepassword
#+BEGIN_SRC bash :results none :exports none :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f
clk secret set --set-parameter global --secret mytoken
#+END_SRC


#+NAME: storeasecret
#+BEGIN_SRC bash :results none :exports code :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f
clk secret set http_bearer
#+END_SRC

As you can see, you don't directly write the secret in the command line, for the
same reasons explained above.

Let's assume for the sake of this use case that you typed "mytoken" when
prompted for a value.

Then, you can look up a secret with:

#+NAME: showsecret
#+BEGIN_SRC bash :results verbatim :exports both :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f :cache yes
clk secret show http_bearer
#+END_SRC

#+RESULTS[442139aba4b7a95e06870afa13c4062b5dec3796]: showsecret
: http_bearer *****


As you can see, the secret is not actually shown, to avoid secrets to easily
show up when you don't want them to. What this command tells is that a secret
actually exists associated to that key.

You have to explicitly ask clk to show the secret.

#+NAME: reallyshowsecret
#+BEGIN_SRC bash :results verbatim :exports both :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f :cache yes
clk secret show http_bearer --secret
#+END_SRC

#+RESULTS[929e49b3d0d6a80136cd215c9aadabdf4df6ad03]: reallyshowsecret
: http_bearer mytoken

And in case you want to provide this secret to another command and just want the secret, nothing more.

#+NAME: reallyshowonlysecret
#+BEGIN_SRC bash :results verbatim :exports both :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f :cache yes
clk secret show http_bearer --secret --field secret
#+END_SRC

#+RESULTS[8e3cb798399ccc8ddaed0841489aaaa0f6833598]: reallyshowonlysecret
: mytoken

Now, putting things together, the previous command will work as expected.

#+NAME: httpwithsecret
#+BEGIN_SRC bash :results verbatim :exports both :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f :cache yes
clk http --base-url someurl get someendpoint
#+END_SRC

#+RESULTS[158a00a9080e5ab95503802e0a00fdd22a999100]: httpwithsecret
: Calling someurl/someendpoint with bearer token mytoken


You can remove this secret now using the unset command. But beware that the
command won't work anymore as its parameter explicitly lookup for this secret.

#+NAME: forcingtheremoval
#+BEGIN_SRC bash :results none :exports none :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f
clk parameter set secret.unset --force
#+END_SRC

#+NAME: removingsecret
#+BEGIN_SRC bash :results none :exports both :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f
clk secret unset http_bearer
#+END_SRC

Then, you can verify that the secret is gone.

#+NAME: checkthatthesecretisgone
#+BEGIN_SRC bash :results verbatim :exports both :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f :cache yes
clk secret show http_bearer
#+END_SRC

#+RESULTS[442139aba4b7a95e06870afa13c4062b5dec3796]: checkthatthesecretisgone
: warning: No secret set


#+NAME: test
#+BEGIN_SRC bash :results none :exports none :noweb yes :shebang "#!/bin/bash -eu" :tangle dealing_with_secrets.sh
  <<init>>

<<createthecommand>>

check-result(setsecretinparameter)

check-result(usesecretinparameter)

check-result(usethebearefromsecret)

check-result(httpwithsecretfail)

<<providepassword>>

<<storeasecret>>

check-result(showsecret)

check-result(reallyshowsecret)

check-result(reallyshowonlysecret)

check-result(httpwithsecret)

<<forcingtheremoval>>

<<removingsecret>>

check-result(checkthatthesecretisgone)

#+END_SRC
