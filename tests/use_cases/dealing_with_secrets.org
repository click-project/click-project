:PROPERTIES:
:ID:       0b6acd63-d091-4c6b-83f6-7d2dd3ce908f
:END:
#+TITLE: Dealing with secrets
#+language: en
#+EXPORT_FILE_NAME: ../../doc/use_cases/dealing_with_secrets.md

#+CALL: ../../lp.org:check-result()

#+name: init
#+BEGIN_SRC bash :results none :exports none :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f
  . ./sandboxing.sh
#+END_SRC

There are plenty of use cases that need to use some secret value.

Let's dig into how those are done in clk.

Because clk uses click, the most obvious way of using a secret value is to use
[[https://click.palletsprojects.com/en/8.1.x/options/#password-prompts][the click way]], with ~hide_input=True, confirmation_prompt=True, prompt=True~:
This will ask twice for the password, hiding the input.

For the sake of the example, let's imagine you create a tool that calls some
http endpoint that requires a bearer token.

Something that would be called like this.

#+BEGIN_SRC bash :results none :exports code
  clk http --base-url http://somesite --bearer sometoken get /something
#+END_SRC

This translates into something that looks like the following python code.

#+NAME: command
#+BEGIN_SRC python :results none :exports code
  class HTTPConfig:
      pass

  @group()
  @option("--bearer", help="The bearer token to request the API", prompt=True, confirmation_prompt=True, hide_input=True, expose_class=HTTPConfig)
  @option("--base-url", help="The url of the site to play with", expose_class=HTTPConfig)
  def http():
      "Commands to play with some OAuth 2 protected site"

  @http.command()
  @argument("path", help="The endpoint to call")
  def get(path):
      "Perform a get request from the site"
      print(f"Calling {config.http.base_url}/{path} with bearer token {config.http.bearer}")

#+END_SRC

#+NAME: createthecommand
#+BEGIN_SRC bash :results none :exports none :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f :noweb yes
  clk command create python --group http
  cat<<EOF >> "${CLKCONFIGDIR}/python/http.py"
  <<command>>
  EOF

#+END_SRC

If you simply use that command, it will prompt you for the password. This may be
not very practical if you are used to call this command pretty often.

To get more information about the pattern behind ~expose_class=HTTPConfig~, see
the tutorial about [[file:dynamic_parameters_and_exposed_class.org][dynamic parameters]].

You may be tempted to add the secret in a simple parameter, like this.

#+NAME: setsecretinparameter
#+BEGIN_SRC bash :results verbatim :exports both :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f :cache yes
  clk parameter set http --bearer mytoken
#+END_SRC

#+RESULTS[43a7457422e8407720a3f8f303221aef490d4a05]: setsecretinparameter
: New global parameters for http: --bearer mytoken

#+NAME: usesecretinparameter
#+BEGIN_SRC bash :results verbatim :exports both :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f :cache yes
  clk http --base-url someurl get someendpoint
#+END_SRC

#+RESULTS[158a00a9080e5ab95503802e0a00fdd22a999100]: usesecretinparameter
: Calling someurl/someendpoint with bearer token mytoken

This works, but it keeps the bearer token in plain text into the clk
parameters. That is not ideal security-wise.

What we can do instead is use a special value for this parameter that tells clk
to lookup the value in your password manager instead.

#+NAME: usethebearefromsecret
#+BEGIN_SRC bash :results verbatim :exports both :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f :cache yes
  clk parameter set http --bearer noeval:secret:http_bearer
#+END_SRC

#+RESULTS[55f18bd97a0c0c1631569bc276ad5278fb2272cd]: usethebearefromsecret
: Removing global parameters of http: --bearer mytoken
: New global parameters for http: --bearer secret:http_bearer

Here is some explanation:
1. the ~noeval:~ prefix tells clk not to replace the following content, so that the secret is not actually looked up when you create the parameter. That way, the parameter will be the literal ~secret:http_bearer~ instead of its content,
2. ~secret:http_bearer~ tells clk to get the secret from your secret manager at the key ~http_bearer~


If the secret is not there, clk will fail and tell you that it could not find it.

#+NAME: httpwithsecretfail
#+BEGIN_SRC bash :results verbatim :exports both :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f :cache yes
  clk http --base-url someurl get someendpoint
#+END_SRC

#+RESULTS[158a00a9080e5ab95503802e0a00fdd22a999100]: httpwithsecretfail
: error: Could not find the secret for http_bearer

Now, there are two situations: either you have access to a password manager, or
you don't.

* if you don't have access to a password manager

  If the former case, ~clk~ fails by default[fn:1], but you can ask it on the
  command line to ask you for the password by providing the ~--ask-secret~ flag to ~clk~.

  #+NAME: askforpassword
  #+BEGIN_SRC bash :results none :exports code
    clk --ask-secret http --base-url someurl get someendpoint
  #+END_SRC

  #+NAME: generate_expect_file
  #+BEGIN_SRC bash :results none :exports none :noweb yes :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f

    # GENERATED USING AUTOEXPECT
    cat<<"EOEXPECT" > "pass.exp"
    #!/usr/bin/expect -f
    #
    # This Expect script was generated by autoexpect on Wed Jun 21 10:25:46 2023
    # Expect and autoexpect were both written by Don Libes, NIST.
    #
    # Note that autoexpect does not guarantee a working script.  It
    # necessarily has to guess about certain things.  Two reasons a script
    # might fail are:
    #
    # 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
    # etc.) and devices discard or ignore keystrokes that arrive "too
    # quickly" after prompts.  If you find your new script hanging up at
    # one spot, try adding a short sleep just before the previous send.
    # Setting "force_conservative" to 1 (see below) makes Expect do this
    # automatically - pausing briefly before sending each character.  This
    # pacifies every program I know of.  The -c flag makes the script do
    # this in the first place.  The -C flag allows you to define a
    # character to toggle this mode off and on.

    set force_conservative 0  ;# set to 1 to force conservative mode even if
                  ;# script wasn't run conservatively originally
    if {$force_conservative} {
        set send_slow {1 .1}
        proc send {ignore arg} {
            sleep .1
            exp_send -s -- $arg
        }
    }

    #
    # 2) differing output - Some programs produce different output each time
    # they run.  The "date" command is an obvious example.  Another is
    # ftp, if it produces throughput statistics at the end of a file
    # transfer.  If this causes a problem, delete these patterns or replace
    # them with wildcards.  An alternative is to use the -p flag (for
    # "prompt") which makes Expect only look for the last line of output
    # (i.e., the prompt).  The -P flag allows you to define a character to
    # toggle this mode off and on.
    #
    # Read the man page for more info.
    #
    # -Don


    set timeout -1
    spawn <<askforpassword>>
    match_max 100000
    expect -exact "warning: Could not find the secret for http_bearer\r
    Please provide the secret http_bearer: "
    send -- "test\r"
    expect -exact "\r
    Repeat for confirmation: "
    send -- "test\r"
    expect eof
    EOEXPECT

  #+END_SRC

  #+NAME: call_ask_for_real
  #+BEGIN_SRC bash :results verbatim :exports results :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f :cache yes
    expect pass.exp |tail -n+2
  #+END_SRC

  #+RESULTS[aa836fe911f7603e903d9063dedf0ab46f782b25]: call_ask_for_real
  : warning: Could not find the secret for http_bearer
  : Please provide the secret http_bearer:
  : Repeat for confirmation:
  : Calling someurl/someendpoint with bearer token test

* if you have access to a password manager

  If you have access to a password manager, here is how you would proceed.

  Every password manager has its particularities, so clk does not try to guess
  where the secret is located. It uses [[https://github.com/jaraco/keyring][keyring]] to deal with secrets and provides
  an interface to lookup secret and store secrets in your password manager.

  To store a secret, use this command

  #+NAME: providepassword
  #+BEGIN_SRC bash :results none :exports none :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f
    clk secret set --set-parameter global --secret mytoken
  #+END_SRC

  #+NAME: storeasecret
  #+BEGIN_SRC bash :results none :exports code :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f
    clk secret set http_bearer
  #+END_SRC

  As you can see, you don't directly write the secret in the command line, for the
  same reasons explained above.

  Let's assume for the sake of this use case that you typed "mytoken" when
  prompted for a value.

  Then, you can look up a secret with:

  #+NAME: showsecret
  #+BEGIN_SRC bash :results verbatim :exports both :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f :cache yes
    clk secret show http_bearer
  #+END_SRC

  #+RESULTS[442139aba4b7a95e06870afa13c4062b5dec3796]: showsecret
  : http_bearer *****


  As you can see, the secret is not actually shown, to avoid secrets to easily
  show up when you don't want them to. What this command tells is that a secret
  actually exists associated to that key.

  You have to explicitly ask clk to show the secret.

  #+NAME: reallyshowsecret
  #+BEGIN_SRC bash :results verbatim :exports both :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f :cache yes
    clk secret show http_bearer --secret
  #+END_SRC

  #+RESULTS[929e49b3d0d6a80136cd215c9aadabdf4df6ad03]: reallyshowsecret
  : http_bearer mytoken

  And in case you want to provide this secret to another command and just want the secret, nothing more.

  #+NAME: reallyshowonlysecret
  #+BEGIN_SRC bash :results verbatim :exports both :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f :cache yes
    clk secret show http_bearer --secret --field secret
  #+END_SRC

  #+RESULTS[8e3cb798399ccc8ddaed0841489aaaa0f6833598]: reallyshowonlysecret
  : mytoken

  Now, putting things together, the previous command will work as expected.

  #+NAME: httpwithsecret
  #+BEGIN_SRC bash :results verbatim :exports both :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f :cache yes
    clk http --base-url someurl get someendpoint
  #+END_SRC

  #+RESULTS[158a00a9080e5ab95503802e0a00fdd22a999100]: httpwithsecret
  : Calling someurl/someendpoint with bearer token mytoken


* using the secret in your command

  This secret can also be used directly in the source code, using the ~get_secret~
  function from clk.

  #+NAME: getsecretfromcode
  #+BEGIN_SRC python :results none :exports code
    from clk import get_secret

    @command()
    def dosomething():
        'Example of using secrets'
        click.echo(get_secret('http_bearer'))
  #+END_SRC

  #+NAME: testgetsecret
  #+BEGIN_SRC bash :results none :exports none :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f :noweb yes
    clk command create python dosomething --force
    cat<<EOF >> "${CLKCONFIGDIR}/python/dosomething.py"
    <<getsecretfromcode>>
    EOF
  #+END_SRC

  #+NAME: showgetsecret
  #+BEGIN_SRC bash :results verbatim :exports both :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f :cache yes
    clk dosomething
  #+END_SRC

  #+RESULTS[fe7117e23eb4a4761ac86c0a87df09b6dbf0a85c]: showgetsecret
  : mytoken


  You can remove this secret now using the unset command. But beware that the
  command won't work anymore as its parameter explicitly lookup for this secret.

  #+NAME: forcingtheremoval
  #+BEGIN_SRC bash :results none :exports none :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f
    clk parameter set secret.unset --force
  #+END_SRC

  #+NAME: removingsecret
  #+BEGIN_SRC bash :results none :exports both :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f
    clk secret unset http_bearer
  #+END_SRC

  Then, you can verify that the secret is gone.

  #+NAME: checkthatthesecretisgone
  #+BEGIN_SRC bash :results verbatim :exports both :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f :cache yes
    clk secret show http_bearer
  #+END_SRC

  #+RESULTS[442139aba4b7a95e06870afa13c4062b5dec3796]: checkthatthesecretisgone
  : warning: No secret set

* using your own secret provider, or the built-in netrc one

  The secret feature of ~clk~ is only a small wrapper on top of [[https://github.com/jaraco/keyring][keyring]]. If you
  configured keyring to use a backend, it will be used in clk.

  If you want to overwrite this in ~clk~, you can pass the import value in the
  ~--keyring~ option.

  For example, clk comes with a keyring to read secrets from netrc, implemented by
  the class ~NetrcKeyring~ of the module ~clk.keyrings~.

  Let's try to use netrc to provide the secret.

  Write this content in ~~/.netrc~

  #+NAME: netrc_content
  #+BEGIN_SRC authinfo :results none :exports code
    machine thesecretname
    login notused
    password thevalue
  #+END_SRC

  #+NAME: generate_netrc
  #+BEGIN_SRC bash :results none :exports none :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f :noweb yes
    cat <<EOF > "${CLK_NETRC_LOCATION}"
    <<netrc_content>>
    EOF
  #+END_SRC

  Then, you can show this secret by explicitly asking clk to use netrc.

  #+NAME: using_netrc
  #+BEGIN_SRC bash :results verbatim :exports both :session 0b6acd63-d091-4c6b-83f6-7d2dd3ce908f :cache yes
    clk --keyring clk.keyrings.NetrcKeyring secret show thesecretname --secret
  #+END_SRC

  #+RESULTS[210ed5d0bbb771f12c720a30832f109557c8c868]: using_netrc
  : thesecretname thevalue

  #+NAME: test
  #+BEGIN_SRC bash :results none :exports none :noweb yes :shebang "#!/bin/bash -eu" :tangle dealing_with_secrets.sh
    <<init>>

    <<createthecommand>>

    check-result(setsecretinparameter)

    check-result(usesecretinparameter)

    check-result(usethebearefromsecret)

    check-result(httpwithsecretfail)

    <<generate_expect_file>>

    check-result(call_ask_for_real)

    <<providepassword>>

    <<storeasecret>>

    check-result(showsecret)

    check-result(reallyshowsecret)

    check-result(reallyshowonlysecret)

    check-result(httpwithsecret)

    <<testgetsecret>>

    check-result(showgetsecret)

    <<forcingtheremoval>>

    <<removingsecret>>

    check-result(checkthatthesecretisgone)

    <<generate_netrc>>

    check-result(using_netrc)

  #+END_SRC

* Footnotes

[fn:1] this is so that if you use ~clk~ in scripts, you will be aware that something went wrong
