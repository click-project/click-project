:PROPERTIES:
:ID:       0a89868c-4cbb-4f83-874a-21ce32b4508f
:END:
#+TITLE: Showing how to import some behavior from another file
#+language: en
#+EXPORT_FILE_NAME: ../../doc/use_cases/bash_command_import.md

#+BEGIN_SRC elisp :exports none :results none
  (org-md-export-to-markdown)
#+END_SRC

#+name: init
#+BEGIN_SRC shell :results none :exports code :session 0a89868c-4cbb-4f83-874a-21ce32b4508f
. ./sandboxing.sh
#+END_SRC

Some times, you want to share some pieces of code in several bash commands.

You can put that code in another directory called lib sibling to the commands.

Say you want to provide a function called shout that capitalize the input.

#+name: shout
#+BEGIN_SRC shell :results verbatim :exports code
shout () {
   tr '[:lower:]' '[:upper:]'
}
#+END_SRC

Let's put this code in a file called mylib.

#+name: install
#+BEGIN_SRC shell :results none :exports code :session 0a89868c-4cbb-4f83-874a-21ce32b4508f :noweb yes
  mkdir -p "${CLKCONFIGDIR}/bin/lib"
  cat<<EOF > "${CLKCONFIGDIR}/bin/lib/mylib"
<<shout>>
EOF
#+END_SRC

Then you can simply import this code in your code, using clk_import.

#+name: create
#+BEGIN_SRC shell :results none :session 0a89868c-4cbb-4f83-874a-21ce32b4508f :noweb yes
clk command create bash somecommand --no-open
cat <<"EOH" > "$(clk command which somecommand)"
#!/bin/bash -eu

source "_clk.sh"

clk_import mylib

clk_usage () {
    cat<<EOF
$0

This command does something
--
<<def>>
EOF
}

clk_help_handler "$@"

echo something | shout

EOH
#+END_SRC

#+name: check
#+BEGIN_SRC shell :results none :exports both :session 0a89868c-4cbb-4f83-874a-21ce32b4508f
test "$(clk somecommand)" = "SOMETHING"
#+END_SRC

#+BEGIN_SRC shell :tangle :exports none bash_command_import.sh :noweb yes
#!/bin/bash -eu

set -e
set -u

<<init>>

<<install>>

<<create>>

<<see>>

<<check>>
#+END_SRC
