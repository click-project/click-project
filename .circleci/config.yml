version: 2.1

orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.2
  sonarcloud: sonarsource/sonarcloud@1.0.2

workflows:
  test:  # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
    jobs:
      - test:
          context: SonarCloud

notify:
  webhooks:
    # gitter notifications
    - url: https://webhooks.gitter.im/e/16634961392360db480a

jobs:
  test:  # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.9 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.8
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - run:
          name: Dynamically provision the tag
          command: |
            echo sonar.projectVersion=$(git describe --tags --abbrev=0) >> sonar-project.properties
      - run:
          command: |
            curl -sfL https://direnv.net/install.sh | bash
            eval "$(direnv hook bash)"
            python3 -m pip install pipenv
            pipenv install --editable .
            pipenv install pytest pre-commit coverage
      - run:
          name: Check code quality
          command: |
            pipenv run pre-commit run -a
      - run:
          name: Run tests
          # This assumes pytest is installed via the install-package step above
          command: |
            pipenv run which clk
            pipenv run pytest
            cd tests && pipenv run coverage xml
      - sonarcloud/scan
